#pragma once
#include <iostream>
#include <vector>
#include "ColorObject.h"

/*функция сортировки:
Имеем вектор произвольной длины, состоящий из экземпляров класса.
У каждого экземпляра есть параметр, принимающий одно из 3-ёх значений - R, G и B.
Так же имеем правило сортировки, которое указывает, какое из значиний должно быть в начале ("минимальное" значение),
в середине и в конце ("максимальное" значение) вектора.

Для сортировки такого вектора достаточно сначала перенести все "минимальные" элементы в начало вектора,
затем перенести все "максимальные" элементы в конец вектора.
Таким образом мы получим полностью отсортированный вектор.
*/
void Sort(std::vector<ColorObject>& set_of_objects, char rules[])
{
    int pos_min = 0; //pos_min - начало неотсортированной части вектора
    for (int i = 0; i < set_of_objects.size(); i++)  //идём по вектору с начала до конца                    
    {
        if (set_of_objects[i].GetColor() == rules[0]) //если нашли "минимальный" элемент...
        {
            std::swap(set_of_objects[i], set_of_objects[pos_min]);//...меняем его местами с элементов в начале вектора
            pos_min++;
        }
    }
    //т.к. начало у нас уже отсортированно, то при сортировки максимального элемента достаточно проверять с конца вектора до "pos_min"

    //идём по всей длине вектора с конца и до уже отсортированной части. pos - конец неотсортированной части вектора
    for (int i = set_of_objects.size() - 1, pos = set_of_objects.size() - 1; i >= pos_min; i--)
    {
        if (set_of_objects[i].GetColor() == rules[2]) //если нашли "максимальный" элемент...
        {
            std::swap(set_of_objects[i], set_of_objects[pos]);//...переносим его в нужную позицию в конце
            pos--;
        }
    }
}


//Создание правила сортировки (с проверкой на корректность ввода)
void CreateRule(char rules[])
{
    int i = 0;
    for (i = 0; i == 0;) //бесконечный цикл для того, чтобы пользователь мог делать "неограниченное количество ошибок" при вводе правила
    {
        std::cin >> rules[0];//запрос первого символа
        if (rules[0] == 'R' || rules[0] == 'G' || rules[0] == 'B') //если введено правильное значение для правила...
        {
            i = 1;; //...то завершаем цикл (ведь получено правильное значение)
        }
        else //иначе выводим ошибку и просим ввести новое значение
        {
            std::cout << "Неверное значение. Введите первый символ: ";
        }
    }
    std::cout << "Введите второй символ: ";
    for (i = 0; i == 0;) //бесконечный цикл для того, чтобы пользователь мог делать "неограниченное количество ошибко" при вводе правила
    {
        std::cin >> rules[1];//запрос второго символа
        if (rules[1] == 'R' || rules[1] == 'G' || rules[1] == 'B') //если введено правильное значение для правила...
        {
            if (rules[1] != rules[0]) //...и второй символ не совпадает с первым...
            {
                i = 1; //...то завершаем цикл (ведь получено правильное значение)
            }
            else //иначе выводим ошибку, что значение первого и второго символа совпадают
            {
                std::cout << "Второй символ не может совпадать с первым символом. Введите второй символ: ";
            }
        }
        else  //иначе выводим ошибку и просим ввести новое значение
        {
            std::cout << "Неверное значение. Введите второй символ: ";
        }
    }
    std::cout << "Третий символ: ";
    for (i = 0; i == 0;) //бесконечный цикл для того, чтобы пользователь мог делать "неограниченное количество ошибко" при вводе правила
    {
        std::cin >> rules[2];//запрос третьего символа
        if (rules[2] == 'R' || rules[2] == 'G' || rules[2] == 'B') //если введено правильное значение для правила...
        {
            if (rules[2] != rules[0] && rules[2] != rules[1]) //...и третий символ не совпадает с первым и вторым...
            {
                i = 1; //...то завершаем цикл (ведь получено правильное значение)
            }
            else //иначе выводим ошибку, что значение первого или второго символа совпадают с третьим символом
            {
                std::cout << "Третий символ не может совпадать с первым или вторым. Введите третий символ ";
            }
        }
        else  //иначе выводим ошибку и просим ввести новое значение
        {
            std::cout << "Неверное значение. Введите третий символ ";
        }
    }
}

